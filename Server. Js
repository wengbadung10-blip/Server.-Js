// server.js
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const sqlite3 = require("sqlite3").verbose();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Database setup (SQLite file called airtime2cash.db)
const db = new sqlite3.Database("./airtime2cash.db", (err) => {
  if (err) {
    console.error("❌ Database connection error:", err.message);
  } else {
    console.log("✅ Connected to SQLite database.");
  }
});

// Create table if not exists
db.run(`
  CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    phone TEXT,
    network TEXT,
    airtimeAmount REAL,
    payout REAL,
    bankName TEXT,
    accountNumber TEXT,
    status TEXT DEFAULT 'pending',
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )
`);

// ✅ API: Convert Airtime
app.post("/api/convert", (req, res) => {
  const { phone, network, airtimeAmount, bankName, accountNumber } = req.body;

  if (!phone || !network || !airtimeAmount || !bankName || !accountNumber) {
    return res.status(400).json({ message: "All fields are required." });
  }

  // Example: 80% payout rate
  const payout = airtimeAmount * 0.8;

  // Save to database
  const sql = `
    INSERT INTO transactions (phone, network, airtimeAmount, payout, bankName, accountNumber)
    VALUES (?, ?, ?, ?, ?, ?)
  `;
  db.run(sql, [phone, network, airtimeAmount, payout, bankName, accountNumber], function (err) {
    if (err) {
      console.error("❌ Database insert error:", err.message);
      return res.status(500).json({ message: "Failed to save transaction." });
    }
    res.json({
      message: "✅ Airtime submitted successfully!",
      transactionId: this.lastID,
      payout: payout
    });
  });
});

// ✅ API: List Transactions
app.get("/api/transactions", (req, res) => {
  db.all("SELECT * FROM transactions ORDER BY createdAt DESC", [], (err, rows) => {
    if (err) {
      return res.status(500).json({ message: "Database error." });
    }
    res.json(rows);
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
});
